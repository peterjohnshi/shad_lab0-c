#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <math.h>
#include "queue.h"

/* Notice: sometimes, Cppcheck would find the potential NULL pointer bugs,
 * but some of them cannot occur. You can suppress them by adding the
 * following line.
 *   cppcheck-suppress nullPointer
 */


// additional
struct list_head* mergeTwoList(struct list_head *head1, struct list_head *head2, bool descend){
    struct list_head list;
    struct list_head *head = &list;
    // head = (struct list_head*)malloc(sizeof(struct list_head));
    INIT_LIST_HEAD(head);
    
    // ptr1 = head1->next;
    // ptr2 = head2->next;
    // element_t *ele1 = list_first_entry(head1, element_t, list);
    // element_t *ele2 = list_first_entry(head2, element_t, list);
    //ascending
    while(!list_empty(head1) && !list_empty(head2)){
        element_t *ele1 = list_first_entry(head1, element_t, list);
        element_t *ele2 = list_first_entry(head2, element_t, list);
        int value1 = atoi(ele1->value);
        int value2 = atoi(ele2->value);
        if(value1<value2){            
        // if(value1>value2){ 
            descend ? list_move_tail(&ele2->list,head) : list_move_tail(&ele1->list,head);
            // list_add_tail(&ele1->list,head);                        
        }
        else{
            descend ? list_move_tail(&ele1->list,head) : list_move_tail(&ele2->list,head);
            // list_add_tail(&ele2->list,head);           
        }
        
                
    }  
    struct list_head *last_node = list_empty(head1) ? head2 : head1;
    list_splice_tail(last_node, head);  
    return head;
}

struct list_head *mergeSort(struct list_head *head, bool descend){     
    if(!head || list_is_singular(head) || list_empty(head)) return head;
    
    struct list_head *slow, *fast, *left, *right;
    
    for (fast = head->next, slow = head->next ; fast->next != head && fast != head ; fast = fast->next->next){
        // element_t *e = list_entry(slow, element_t, list);
        // printf("%s\n", e->value);        
        slow = slow->next;        
    }
    struct list_head mi;  
    // struct list_head *mid = q_new();
    struct list_head *mid = &mi;          //avoid malloc error
    INIT_LIST_HEAD(mid);
    list_cut_position(mid, head, slow->prev); 
    right = mergeSort(head, descend);
    left = mergeSort(mid, descend);
    return mergeTwoList(left, right, descend);
}


/* Create an empty queue */
struct list_head *q_new()
{
    // struct list_head list;
    // struct list_head *head = &list;
    struct list_head *head =(struct list_head*)malloc(sizeof(struct list_head));
    if(!head) {
        free(head);
        return NULL;
    }
    INIT_LIST_HEAD(head);
    return head;    
}

/* Free all storage used by queue */
void q_free(struct list_head *head) 
{
    if(!head) return;    
    if(list_empty(head)){
        free(head);
        return;
    }
    element_t *entry, *safe;
    list_for_each_entry_safe(entry, safe, head, list){
        q_release_element(entry);
    };
    free(head);
}

/* Insert an element at head of queue */
bool q_insert_head(struct list_head *head, char *s)
{
    if (!head) return false;
    element_t *newNode = (element_t*)malloc(sizeof(element_t));
    if(!newNode) return false;
    newNode->value = malloc(sizeof(char)*(strlen(s)+1));
    if(!(newNode->value)){
        free(newNode);
        return false; 
    }       
    strcpy(newNode->value,s);    
    list_add(&newNode->list, head);   
    return true;
}

/* Insert an element at tail of queue */
bool q_insert_tail(struct list_head *head, char *s)
{
    element_t *newNode = (element_t*)malloc(sizeof(element_t));
    if(!newNode) return false;
    newNode->value = malloc(sizeof(char)*(strlen(s)+1));
    if(!newNode->value){
        free(newNode);
        return false;
    }
    strcpy(newNode->value,s);
    list_add_tail(&newNode->list, head);
    return true;
}

/* Remove an element from head of queue */
element_t *q_remove_head(struct list_head *head, char *sp, size_t bufsize)
{
    if (!head || list_empty(head)) return NULL;
    element_t *first_ele = list_first_entry(head, element_t, list);
    if (sp != NULL){
        memset(sp, '\0', bufsize);
        strncpy(sp, first_ele->value, bufsize);
    }
    list_del_init(&(first_ele->list));
    // element_t *new_ele = list_first_entry(head, element_t, list); 
    return first_ele;    
}

/* Remove an element from tail of queue */
element_t *q_remove_tail(struct list_head *head, char *sp, size_t bufsize)
{
    if(!head || list_empty(head)) return NULL;
    element_t *last_ele = list_last_entry(head, element_t, list);
    if (sp != NULL){
        memset(sp, '\0', bufsize);
        strncpy(sp, last_ele->value, bufsize);
    }
    list_del_init(&(last_ele->list));
    return last_ele;
}

/* Return number of elements in queue */
int q_size(struct list_head *head)
{
    if(!head || list_empty(head)) return 0;
    int counter=0;
    element_t *entry;
    list_for_each_entry(entry,head, list){
        counter++;
    }
    return counter;
}

/* Delete the middle node in queue */
bool q_delete_mid(struct list_head *head)
{
    // https://leetcode.com/problems/delete-the-middle-node-of-a-linked-list/
    if (!head || list_empty(head)) return false;    
    // int mid = round(q_size(head)/2);
    // element_t *entry, *safe;
    // int counter=1;
    // list_for_each_entry_safe(entry, safe, head, list){
    //     if (counter==mid) q_release_element(entry);
    // }

    struct list_head *forward = head->next;
    struct list_head *backward = head->prev;
    
    for (;forward!=backward && forward->next!=backward;){
        forward = forward->next;
        backward = backward->prev;
    }
    // have to remove node first and then free it
    list_del_init(forward);
    q_release_element(list_entry(forward, element_t, list));

    return true;
}

/* Delete all nodes that have duplicate string */
bool q_delete_dup(struct list_head *head)
{
    // https://leetcode.com/problems/remove-duplicates-from-sorted-list-ii/
    if (!head || list_empty(head)) return false;
    element_t *entry, *safe;
    char *tmp = NULL;
    q_sort(head, 1);
    list_for_each_entry_safe(entry, safe, head, list){
        if (entry->value == safe->value || *(entry->value) == *tmp){
            q_release_element(entry);
            tmp = safe->value;
        } 
    }
    return true;
}

/* Swap every two adjacent nodes */
void q_swap(struct list_head *head)
{
    // https://leetcode.com/problems/swap-nodes-in-pairs/
    if (!head || list_empty(head) || list_is_singular(head)) return;
    for(struct list_head *pointer = head->next; pointer!=head && pointer->next!=head; pointer = pointer->next){
        struct list_head *tmp = pointer->next->next;       
        pointer->prev->next = pointer->next;
        pointer->next->prev = pointer->prev;
        pointer->next->next = pointer;
        pointer->prev = pointer->next;
        pointer->next = tmp;
    }
}

/* Reverse elements in queue */
void q_reverse(struct list_head *head) {
    if (!head) return;
    struct list_head *ptr = head, *tmp1, *tmp2;
    tmp1 = ptr->next;
    tmp2 = ptr->prev;
    ptr->next = tmp2;
    ptr->prev = tmp1;
    ptr = tmp1;
    while(ptr!=head){
        tmp1 = ptr->next;
        tmp2 = ptr->prev;
        ptr->next = tmp2;
        ptr->prev = tmp1;
        ptr = tmp1;
    }   
}

/* Reverse the nodes of the list k at a time */
void q_reverseK(struct list_head *head, int k)
{
    // https://leetcode.com/problems/reverse-nodes-in-k-group/
     
}

/* Sort elements of queue in ascending/descending order */
void q_sort(struct list_head *head, bool descend) {
    if (!head || list_empty(head)) return; 
    head = mergeSort(head, descend);
}

/* Remove every node which has a node with a strictly less value anywhere to
 * the right side of it */
int q_ascend(struct list_head *head)
{
    // https://leetcode.com/problems/remove-nodes-from-linked-list/
    return 0;
}

/* Remove every node which has a node with a strictly greater value anywhere to
 * the right side of it */
int q_descend(struct list_head *head)
{
    // https://leetcode.com/problems/remove-nodes-from-linked-list/
    return 0;
}

/* Merge all the queues into one sorted queue, which is in ascending/descending
 * order */
int q_merge(struct list_head *head, bool descend)
{
    // https://leetcode.com/problems/merge-k-sorted-lists/
    
    return 0;
}


